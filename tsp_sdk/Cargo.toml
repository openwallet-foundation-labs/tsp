[package]
name = "tsp_sdk"
version.workspace = true
edition.workspace = true
license.workspace = true
repository.workspace = true
homepage.workspace = true
readme.workspace = true
description.workspace = true
rust-version.workspace = true

publish = true

[features]
cesr-t = []
default = ["async"]
essr = []
strict = []
fuzzing = ["dep:arbitrary"]
demo = []
nacl = ["essr"]
pq = ["dep:hpke_pq", "essr"]
async = [
    "resolve",
    "aries-askar",
    "dep:async-stream",
    "dep:futures",
    "dep:tokio",
    "dep:tokio-tungstenite",
    "dep:tokio-util",
    "dep:tracing",
    "dep:rustls",
    "dep:tokio-rustls",
    "dep:rustls-pki-types",
    "dep:rustls-native-certs",
    "dep:rustls-pemfile",
    "dep:quinn",
]
resolve = ["serialize", "dep:reqwest", "dep:didwebvh-resolver"]
serialize = ["dep:serde", "dep:serde_with"]
use_local_certificate = []
postgres = ["async", "aries-askar/postgres"]
create-webvh = ["dep:pyo3", "dep:serde-pyobject"]

[dependencies]
# generic
base64ct = { workspace = true }
thiserror = { workspace = true }
url = { workspace = true }
zeroize = { workspace = true }
tracing = { workspace = true, optional = true }
once_cell = { workspace = true }
# crypto
ed25519-dalek = { workspace = true }
hpke = { workspace = true }
hpke_pq = { workspace = true, optional = true }
rand = { workspace = true }
rand_core = { workspace = true }
sha2 = { workspace = true }
blake2 = { workspace = true }
typenum = { workspace = true }
crypto_box = { workspace = true }
# async
aries-askar = { workspace = true, optional = true }
async-stream = { workspace = true, optional = true }
futures = { workspace = true, optional = true }
tokio = { workspace = true, optional = true }
# transports
tokio-tungstenite = { workspace = true, optional = true }
tokio-util = { workspace = true, optional = true }
bytes = { workspace = true }
rustls = { workspace = true, optional = true }
tokio-rustls = { workspace = true, optional = true }
rustls-pki-types = { workspace = true, optional = true }
rustls-native-certs = { workspace = true, optional = true }
rustls-pemfile = { workspace = true, optional = true }
quinn = { workspace = true, optional = true }
# resolve
reqwest = { workspace = true, optional = true }
# serialize
serde = { workspace = true, optional = true }
serde_json = { workspace = true, optional = false }
serde_with = { workspace = true, optional = true }
bs58 = { workspace = true, optional = false }
# fuzzing
arbitrary = { workspace = true, optional = true }
async-trait = "0.1.88"

# webvh
pyo3 = { workspace = true, features = ["auto-initialize"], optional = true }
serde-pyobject = { workspace = true, optional = true }

# not used directly, but we need to configure
# the JS feature in this transitive dependency
# required for compiling to wasm32-unknown-unknown
[dependencies.getrandom]
version = "0.2"
features = ["js"]

[dev-dependencies]
serial_test = { version = "3.0" }
arbitrary = { workspace = true }
wasm-bindgen-test = "0.3.0"

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
didwebvh-resolver = { workspace = true, optional = true }