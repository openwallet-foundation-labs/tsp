name: Check

on:
  pull_request:
    branches: [ "main" ]

jobs:
  clippy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - run: cargo clippy --workspace --tests -- --deny "warnings"

  rust-fmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - run: cargo fmt --all --check

  cargo-test:
    runs-on: ubuntu-latest
    env:
      RUST_BACKTRACE: "1"
    strategy:
      matrix:
        features:
          - "create-webvh"
          - "create-webvh,pq"
          - "nacl"
          - "pq"
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Install uv
        if: contains(matrix.features, 'create-webvh')
        uses: astral-sh/setup-uv@v5
      - name: Install the project
        if: contains(matrix.features, 'create-webvh')
        run: uv --directory tsp_sdk sync --locked --all-extras --dev
      - name: Activate virtualenv
        if: contains(matrix.features, 'create-webvh')
        run: |
          source ${GITHUB_WORKSPACE}/tsp_sdk/.venv/bin/activate
          echo PATH=$PATH >> $GITHUB_ENV
          echo VIRTUAL_ENV=$VIRTUAL_ENV >> $GITHUB_ENV
      - run: |
          cargo test --features ${{ matrix.features }}

  cargo-deny:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - uses: EmbarkStudios/cargo-deny-action@v1
        with:
          command: check
          arguments: --workspace
          rust-version: '1.85'

  cargo-doc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - run: cargo doc --workspace --no-deps

  check-wasm32:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
      - name: Install wasm-pack
        run: cargo install wasm-pack
      - name: Run tests with wasm-pack
        working-directory: tsp_sdk
        run: wasm-pack test --node -- -p tsp_sdk --no-default-features --features "resolve"

  check-python:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - run: rustup component add clippy

      - name: Set up Python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      - name: Install maturin
        run: pip install maturin

      - name: Create and activate virtual environment
        working-directory: tsp_python
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install maturin

      - name: Build and test
        working-directory: tsp_python
        run: |
          source venv/bin/activate
          maturin develop
          python3 test.py

  check-node:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install wasm-pack
        run: |
          curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
          wasm-pack --version
      - name: Build Wasm extension
        run: wasm-pack build --target nodejs tsp_javascript/

      - name: Install npm dependencies
        working-directory: tsp_node/
        run: npm install

      - name: Run tests with Mocha
        working-directory: tsp_node/
        run: npm test

  fuzz:
    name: run cargo-fuzz
    runs-on: ubuntu-latest
    strategy:
      matrix:
        features:
          - ""
    steps:
      - uses: actions/checkout@v4
      - name: Install nightly toolchain
        uses: dtolnay/rust-toolchain@be73d7920c329f220ce78e0234b8f96b7ae60248
        with:
          toolchain: nightly
      - uses: Swatinem/rust-cache@v2
      
      - name: Install cargo fuzz
        uses: taiki-e/install-action@8984d603c208823d3c1a1b796f4081736f3ae3f9
        with:
          tool: cargo-fuzz

      - name: Smoke-test fuzz targets
        run: |
          cargo fuzz build ${{ matrix.features }}
          for target in $(cargo fuzz list ${{ matrix.features }}) ; do
            cargo fuzz run ${{ matrix.features }} $target -- -max_total_time=10
          done
